<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Contributing</title>
    <link rel="stylesheet" type="text/css" href="_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <!--
 Copyright 2018 Davide Bettio <davide@uninstall.it>

 SPDX-License-Identifier: Apache-2.0 OR LGPL-2.1-or-later
-->
<section class="tex2jax_ignore mathjax_ignore" id="contributing">
<h1>Contributing</h1>
<p>Make sure to understand the license and the contribution guidelines before contributing and last but not least be kind.</p>
<section id="git-recommended-practices">
<h2>Git Recommended Practices</h2>
<ul class="simple">
<li><p>Commit messages should have a <a class="reference external" href="https://github.com/erlang/otp/wiki/writing-good-commit-messages">summary and a description</a></p></li>
<li><p>Avoid trailing white spaces</p></li>
<li><p>Always <code class="docutils literal notranslate"><span class="pre">git</span> <span class="pre">pull</span> <span class="pre">--rebase</span></code></p></li>
<li><p><a class="reference external" href="https://git-scm.com/book/id/v2/Git-Tools-Rewriting-History">Clean up your branch history</a> with <code class="docutils literal notranslate"><span class="pre">git</span> <span class="pre">rebase</span> <span class="pre">-i</span></code></p></li>
<li><p>All your intermediate commits should build</p></li>
</ul>
</section>
<section id="coding-style">
<h2>Coding Style</h2>
<section id="c-code">
<h3>C Code</h3>
<section id="indentation">
<h4>Indentation</h4>
<ul class="simple">
<li><p><a class="reference external" href="https://en.wikipedia.org/wiki/Indentation_style#K&amp;R_style">K&amp;R indentation and braces style</a></p></li>
<li><p><a class="reference external" href="https://en.wikipedia.org/wiki/Indentation_style#Variant:_mandatory_braces">Mandatory braces</a></p></li>
<li><p>4 spaces indentation</p></li>
</ul>
<p>Good:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">void</span> <span class="n">f</span><span class="p">(</span><span class="nb">int</span> <span class="n">reverse</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">reverse</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">puts</span><span class="p">(</span><span class="s2">&quot;!dlroW olleH&quot;</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">puts</span><span class="p">(</span><span class="s2">&quot;Hello world&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>Bad:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">void</span> <span class="n">f</span><span class="p">(</span><span class="nb">int</span> <span class="n">reverse</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">reverse</span><span class="p">)</span>
        <span class="n">puts</span> <span class="p">(</span><span class="s2">&quot;!dlroW olleH&quot;</span><span class="p">);</span>
    <span class="k">else</span>
        <span class="n">puts</span> <span class="p">(</span><span class="s2">&quot;Hello world&quot;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
</section>
<section id="names">
<h4>Names</h4>
<ul class="simple">
<li><p>Struct names are PascalCase (e.g. Context)</p></li>
<li><p>Scalar types are lower case (e.g. term)</p></li>
<li><p>All other names (e.g. functions and variables) are snake_case (e.g. term_is_integer)</p></li>
<li><p>Always prefix function names (e.g. term_is_nil, term_is_integer, context_new, context_destroy)</p></li>
</ul>
</section>
<section id="other-coding-conventions">
<h4>Other Coding Conventions</h4>
<ul class="simple">
<li><p>Pointer * should be with the variable name rather than with the type (e.g. <code class="docutils literal notranslate"><span class="pre">char</span> <span class="pre">*name</span></code>, not <code class="docutils literal notranslate"><span class="pre">char*</span> <span class="pre">name</span></code>)</p></li>
<li><p>Avoid long lines, use intermediate variables with meaningful names.</p></li>
</ul>
</section>
</section>
<section id="elixir-code">
<h3>Elixir Code</h3>
<p>Just use Elixir formatter enforced style.</p>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>